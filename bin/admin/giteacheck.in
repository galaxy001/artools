#!/bin/bash
#
# Copyright (C) 2018-21 artoo@artixlinux.org
# Copyright (C) 2021 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

m4_include(lib/util-base.sh)
m4_include(lib/util-pkg.sh)
m4_include(lib/base/message.sh)
m4_include(lib/pkg/common.sh)
m4_include(lib/pkg/repo.sh)
m4_include(lib/pkg/gitea.sh)
m4_include(lib/admin/team.sh)

subrepos() {
    local subs
    subs=$(find "${TREE_DIR_ARTIX}/${GROUP}" -type f -name .gitrepo | sort)
    echo "${subs[@]}"
}

get_team() {
    local p="$1" t
    if [[ -d "$p/$CARCH/${valid_names[0]}" ]] || [[ -d "$p/repos/${valid_names[0]}"-any ]] || [[ -d "$p/repos/${valid_names[0]}-$CARCH" ]]; then
        t="${valid_names[0]}"
    elif [[ -d "$p/$CARCH/${valid_names[1]}" ]] || [[ -d "$p/repos/${valid_names[1]}"-any ]] || [[ -d "$p/repos/${valid_names[1]}-$CARCH" ]]; then
        t="${valid_names[1]}"
    elif [[ -d "$p/$CARCH/${valid_names[2]}" ]] || [[ -d "$p/repos/${valid_names[2]}"-any ]] || [[ -d "$p/repos/${valid_names[2]}-$CARCH" ]]; then
        t="${valid_names[2]}"
    elif [[ -d "$p/$CARCH/${valid_names[3]}" ]] || [[ -d "$p/repos/${valid_names[3]}"-any ]] || [[ -d "$p/repos/${valid_names[3]}-$CARCH" ]]; then
        t="${valid_names[3]}"
    fi
    echo "$t"
}

run() {
    if "${check}"; then
        local repos
        for org in packages{A..Z} packages{Ruby,Perl,Python}; do
            repos=$(list_org_repos "$org")
            for r in "$repos"; do
                check_repo_content "$org" "$r"
            done
        done
    fi
    if "${list}"; then
        for r in $(subrepos); do
            local pkg=${r%/*} gitname org team
            team=$(get_team "$pkg")
            pkg=${pkg##*/}
            gitname=$(get_compliant_name "$pkg")
            org=$(get_pkg_org "$gitname")

            list_repo_teams "$org" "$gitname" "$team"
        done
    fi
}

load_makepkg_config

load_valid_names

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -g <group>    Group name (-l)'
    echo '    -c            Check all package orgs if a repository is obsolete'
    echo '    -l            List team assigned to a repository'
    echo '    -a            Add missing team to a repository (-l)'
    echo '    -r            Rremove wrong team from a repository (-l)'
    echo '    -h            This help'
    echo ''
    echo ''
    exit "$1"
}

check=false
add=false
remove=false
list=false

GROUP=packages

opts='g:clrah'

while getopts "${opts}" arg; do
    case "${arg}" in
        g) GROUP="$OPTARG" ;;
        c) check=true ;;
        a) add=true ;;
        r) remove=true ;;
        l) list=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(( OPTIND - 1 ))

run
